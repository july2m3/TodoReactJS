{"version":3,"sources":["Components/Header.js","Components/SubHeading.js","Components/Todo.js","Components/TodoList.js","Components/AddTodo.js","TodoApp.js","serviceWorker.js","index.js"],"names":["Header","className","SubHeading","handleTodoClick","e","target","includes","parentNode","style","Todo","value","handleDeleteClick","onClick","TodoList","todos","listItems","map","todo","key","AddTodo","input","type","name","placeholder","onKeyDown","autoFocus","TodoApp","props","addNewTodo","newTodo","todoInList","newTodos","state","concat","setState","bind","deleteTodo","json","localStorage","getItem","JSON","parse","this","console","log","prevProps","prevState","length","data","stringify","setItem","i","filter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e5e6379.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => <h1 className=\"title\">TodoJS</h1>;\nexport default Header;\n","import React from 'react';\n\nconst SubHeading = () => <h2 className=\"sub-heading\">Today</h2>;\nexport default SubHeading;\n","import React from 'react';\n\nfunction handleTodoClick(e) {\n  if (e.target.className.includes('far')) {\n    e.target.className = 'fas fa-circle';\n    e.target.parentNode.style = 'text-decoration: line-through';\n  } else {\n    e.target.className = 'far fa-circle';\n    e.target.parentNode.style = 'text-decoration: none';\n  }\n}\n\nconst Todo = ({ value, handleDeleteClick }) => {\n  return (\n    <li>\n      <i className=\"far fa-circle\" onClick={handleTodoClick} />\n      <span>{value}</span>\n      <i\n        className=\"fas fa-skull\"\n        onClick={e => {\n          // handleDeleteClick(e.target.parentNode.children[1]);\n          handleDeleteClick(value);\n        }}\n      />\n    </li>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, handleDeleteClick }) => {\n  const listItems = todos.map(todo => (\n    <Todo\n      key={todo.value}\n      value={todo.value}\n      handleDeleteClick={handleDeleteClick}\n    />\n  ));\n  return (\n    <div className=\"todo-list\">\n      <ul>{listItems}</ul>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\n\nconst AddTodo = ({ input }) => {\n  return (\n    <input\n      type=\"text\"\n      name=\"newTodo\"\n      className=\"add-todo\"\n      placeholder=\"Type and hit enter\"\n      onKeyDown={input}\n      autoFocus\n    />\n  );\n};\n\nexport default AddTodo;\n","/*\nMaking a todo using react!\nwant to model this site: http://todolistme.net/\nterms:\n  component\n  stateless functional component\n  lifecycle methods\n  state\n  props\n  local storaage\n  json\n    stringify\n\n\n*/\nimport React from 'react';\nimport Header from './Components/Header';\nimport SubHeading from './Components/SubHeading';\nimport TodoList from './Components/TodoList';\nimport AddTodo from './Components/AddTodo';\n// import FutureTodos from './Components/FutureTodos';\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n    };\n\n    //You can get rid of bindings below if you use arrow syntax\n    //This is due to arrows functions not having a 'this' binding,\n    //  instead they use whatever 'this' is in the scope\n    // this.addNewTodo = this.addNewTodo.bind(this);\n    this.todoInList = this.todoInList.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n  }\n\n  componentDidMount() {\n    try {\n      const json = localStorage.getItem('todos');\n      const todos = JSON.parse(json);\n\n      if (todos) this.setState(() => ({ todos }));\n    } catch (e) {\n      console.log(`data corrupted, see: ${e}`);\n    }\n  }\n\n  //Update local storage only if todos was actually changed\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos.length !== this.state.todos.length) {\n      const data = JSON.stringify(this.state.todos);\n      localStorage.setItem('todos', data);\n    }\n  }\n\n  todoInList(todo) {\n    for (let i = 0; i < this.state.todos.length; i++) {\n      if (this.state.todos[i].value === todo.value) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  addNewTodo = e => {\n    const newTodo = { value: e.target.value };\n    if (e.target.value === '') {\n    }\n\n    if (\n      e.key === 'Enter' &&\n      e.target.value !== '' &&\n      !this.todoInList(newTodo)\n    ) {\n      const newTodos = this.state.todos.concat(newTodo);\n      this.setState(() => ({ todos: newTodos }));\n      e.target.value = '';\n    }\n  };\n\n  deleteTodo(value) {\n    const newTodos = this.state.todos;\n    this.setState(prevState => ({\n      todos: newTodos.filter(todo => {\n        return value !== todo.value;\n      }),\n    }));\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"content\">\n          <Header />\n          <SubHeading />\n          <TodoList\n            todos={this.state.todos}\n            handleDeleteClick={this.deleteTodo}\n          />\n          <AddTodo input={this.addNewTodo} />\n        </div>\n        <div className=\"message\">\n          {this.state.todos.length === 0 && <p>Add items to get started!</p>}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default TodoApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport TodoApp from './TodoApp';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<TodoApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}